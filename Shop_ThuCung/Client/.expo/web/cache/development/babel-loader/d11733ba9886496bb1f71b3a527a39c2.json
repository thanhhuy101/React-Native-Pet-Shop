{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"enabled\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { State } from \"../../State\";\nimport { DEFAULT_TOUCH_SLOP } from \"../constants\";\nimport GestureHandler from \"./GestureHandler\";\n\nvar NativeViewGestureHandler = function (_GestureHandler) {\n  _inherits(NativeViewGestureHandler, _GestureHandler);\n\n  var _super = _createSuper(NativeViewGestureHandler);\n\n  function NativeViewGestureHandler() {\n    var _this;\n\n    _classCallCheck(this, NativeViewGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"buttonRole\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"shouldActivateOnStart\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"disallowInterruption\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"startX\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"startY\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"minDistSq\", DEFAULT_TOUCH_SLOP * DEFAULT_TOUCH_SLOP);\n\n    return _this;\n  }\n\n  _createClass(NativeViewGestureHandler, [{\n    key: \"init\",\n    value: function init(ref, propsRef) {\n      _get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"init\", this).call(this, ref, propsRef);\n\n      this.setShouldCancelWhenOutside(true);\n      this.view.style['touchAction'] = 'auto';\n      this.view.style['WebkitTouchCallout'] = 'auto';\n\n      if (this.view.hasAttribute('role')) {\n        this.buttonRole = true;\n      } else {\n        this.buttonRole = false;\n      }\n\n      if (this.view.tagName.toLowerCase() === 'input') {\n        this.view.style['webkitUserSelect'] = 'auto';\n      }\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$enabled = _ref.enabled,\n          enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n          props = _objectWithoutProperties(_ref, _excluded);\n\n      _get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        enabled: enabled\n      }, props));\n\n      if (this.config.shouldActivateOnStart !== undefined) {\n        this.shouldActivateOnStart = this.config.shouldActivateOnStart;\n      }\n\n      if (this.config.disallowInterruption !== undefined) {\n        this.disallowInterruption = this.config.disallowInterruption;\n      }\n    }\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {\n      _get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"resetConfig\", this).call(this);\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(event) {\n      this.tracker.addToTracker(event);\n\n      _get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"onPointerDown\", this).call(this, event);\n\n      this.newPointerAction();\n    }\n  }, {\n    key: \"onPointerAdd\",\n    value: function onPointerAdd(event) {\n      this.tracker.addToTracker(event);\n\n      _get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"onPointerAdd\", this).call(this, event);\n\n      this.newPointerAction();\n    }\n  }, {\n    key: \"newPointerAction\",\n    value: function newPointerAction() {\n      this.startX = this.tracker.getLastAvgX();\n      this.startY = this.tracker.getLastAvgY();\n\n      if (this.currentState !== State.UNDETERMINED) {\n        return;\n      }\n\n      this.begin();\n\n      if (this.buttonRole) {\n        this.activate();\n      }\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(event) {\n      this.tracker.track(event);\n      var dx = this.startX - this.tracker.getLastAvgX();\n      var dy = this.startY - this.tracker.getLastAvgY();\n      var distSq = dx * dx + dy * dy;\n\n      if (!this.buttonRole && distSq >= this.minDistSq && this.currentState === State.BEGAN) {\n        this.activate();\n      }\n    }\n  }, {\n    key: \"onPointerOut\",\n    value: function onPointerOut() {\n      this.cancel();\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(event) {\n      _get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"onPointerUp\", this).call(this, event);\n\n      this.onUp(event);\n    }\n  }, {\n    key: \"onPointerRemove\",\n    value: function onPointerRemove(event) {\n      _get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"onPointerRemove\", this).call(this, event);\n\n      this.onUp(event);\n    }\n  }, {\n    key: \"onUp\",\n    value: function onUp(event) {\n      this.tracker.removeFromTracker(event.pointerId);\n\n      if (this.tracker.getTrackedPointersCount() === 0) {\n        if (this.currentState === State.ACTIVE) {\n          this.end();\n        } else {\n          this.fail();\n        }\n      }\n    }\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(event) {\n      _get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"onPointerCancel\", this).call(this, event);\n\n      this.cancel();\n      this.reset();\n    }\n  }, {\n    key: \"shouldRecognizeSimultaneously\",\n    value: function shouldRecognizeSimultaneously(handler) {\n      if (_get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"shouldRecognizeSimultaneously\", this).call(this, handler)) {\n        return true;\n      }\n\n      if (handler instanceof NativeViewGestureHandler && handler.getState() === State.ACTIVE && handler.disallowsInterruption()) {\n        return false;\n      }\n\n      var canBeInterrupted = !this.disallowInterruption;\n\n      if (this.currentState === State.ACTIVE && handler.getState() === State.ACTIVE && canBeInterrupted) {\n        return false;\n      }\n\n      return this.currentState === State.ACTIVE && canBeInterrupted && handler.getTag() > 0;\n    }\n  }, {\n    key: \"shouldBeCancelledByOther\",\n    value: function shouldBeCancelledByOther(_handler) {\n      return !this.disallowInterruption;\n    }\n  }, {\n    key: \"disallowsInterruption\",\n    value: function disallowsInterruption() {\n      return this.disallowInterruption;\n    }\n  }]);\n\n  return NativeViewGestureHandler;\n}(GestureHandler);\n\nexport { NativeViewGestureHandler as default };","map":{"version":3,"mappings":"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","names":["State","DEFAULT_TOUCH_SLOP","GestureHandler","NativeViewGestureHandler","args","_defineProperty","init","ref","propsRef","setShouldCancelWhenOutside","view","style","hasAttribute","buttonRole","tagName","toLowerCase","updateGestureConfig","enabled","props","config","shouldActivateOnStart","undefined","disallowInterruption","resetConfig","onPointerDown","event","tracker","addToTracker","newPointerAction","onPointerAdd","startX","getLastAvgX","startY","getLastAvgY","currentState","UNDETERMINED","begin","activate","onPointerMove","track","dx","dy","distSq","minDistSq","BEGAN","onPointerOut","cancel","onPointerUp","onUp","onPointerRemove","removeFromTracker","pointerId","getTrackedPointersCount","ACTIVE","end","fail","onPointerCancel","reset","shouldRecognizeSimultaneously","handler","getState","disallowsInterruption","canBeInterrupted","getTag","shouldBeCancelledByOther","_handler"],"sources":["NativeViewGestureHandler.ts"],"sourcesContent":["import { State } from '../../State';\nimport { DEFAULT_TOUCH_SLOP } from '../constants';\nimport { AdaptedEvent, Config } from '../interfaces';\n\nimport GestureHandler from './GestureHandler';\nexport default class NativeViewGestureHandler extends GestureHandler {\n  private buttonRole!: boolean;\n\n  //TODO: Implement logic for activation on start\n  //@ts-ignore Logic yet to be implemented\n  private shouldActivateOnStart = false;\n  private disallowInterruption = false;\n\n  private startX = 0;\n  private startY = 0;\n  private minDistSq = DEFAULT_TOUCH_SLOP * DEFAULT_TOUCH_SLOP;\n\n  public init(ref: number, propsRef: React.RefObject<unknown>): void {\n    super.init(ref, propsRef);\n\n    this.setShouldCancelWhenOutside(true);\n\n    this.view.style['touchAction'] = 'auto';\n\n    //@ts-ignore Turns on defualt touch behavior on Safari\n    this.view.style['WebkitTouchCallout'] = 'auto';\n\n    if (this.view.hasAttribute('role')) {\n      this.buttonRole = true;\n    } else {\n      this.buttonRole = false;\n    }\n\n    if (this.view.tagName.toLowerCase() === 'input') {\n      //Enables text input on Safari\n      this.view.style['webkitUserSelect'] = 'auto';\n    }\n  }\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    super.updateGestureConfig({ enabled: enabled, ...props });\n\n    if (this.config.shouldActivateOnStart !== undefined) {\n      this.shouldActivateOnStart = this.config.shouldActivateOnStart;\n    }\n    if (this.config.disallowInterruption !== undefined) {\n      this.disallowInterruption = this.config.disallowInterruption;\n    }\n  }\n\n  protected resetConfig(): void {\n    super.resetConfig();\n  }\n\n  protected onPointerDown(event: AdaptedEvent): void {\n    this.tracker.addToTracker(event);\n    super.onPointerDown(event);\n    this.newPointerAction();\n  }\n\n  protected onPointerAdd(event: AdaptedEvent): void {\n    this.tracker.addToTracker(event);\n    super.onPointerAdd(event);\n    this.newPointerAction();\n  }\n\n  private newPointerAction(): void {\n    this.startX = this.tracker.getLastAvgX();\n    this.startY = this.tracker.getLastAvgY();\n\n    if (this.currentState !== State.UNDETERMINED) {\n      return;\n    }\n\n    this.begin();\n    if (this.buttonRole) {\n      this.activate();\n    }\n  }\n\n  protected onPointerMove(event: AdaptedEvent): void {\n    this.tracker.track(event);\n\n    const dx = this.startX - this.tracker.getLastAvgX();\n    const dy = this.startY - this.tracker.getLastAvgY();\n    const distSq = dx * dx + dy * dy;\n\n    if (\n      !this.buttonRole &&\n      distSq >= this.minDistSq &&\n      this.currentState === State.BEGAN\n    ) {\n      this.activate();\n    }\n  }\n\n  protected onPointerOut(): void {\n    this.cancel();\n  }\n\n  protected onPointerUp(event: AdaptedEvent): void {\n    super.onPointerUp(event);\n    this.onUp(event);\n  }\n\n  protected onPointerRemove(event: AdaptedEvent): void {\n    super.onPointerRemove(event);\n    this.onUp(event);\n  }\n\n  private onUp(event: AdaptedEvent): void {\n    this.tracker.removeFromTracker(event.pointerId);\n\n    if (this.tracker.getTrackedPointersCount() === 0) {\n      if (this.currentState === State.ACTIVE) {\n        this.end();\n      } else {\n        this.fail();\n      }\n    }\n  }\n\n  protected onPointerCancel(event: AdaptedEvent): void {\n    super.onPointerCancel(event);\n    this.cancel();\n    this.reset();\n  }\n\n  public shouldRecognizeSimultaneously(handler: GestureHandler): boolean {\n    if (super.shouldRecognizeSimultaneously(handler)) {\n      return true;\n    }\n\n    if (\n      handler instanceof NativeViewGestureHandler &&\n      handler.getState() === State.ACTIVE &&\n      handler.disallowsInterruption()\n    ) {\n      return false;\n    }\n\n    const canBeInterrupted = !this.disallowInterruption;\n\n    if (\n      this.currentState === State.ACTIVE &&\n      handler.getState() === State.ACTIVE &&\n      canBeInterrupted\n    ) {\n      return false;\n    }\n\n    return (\n      this.currentState === State.ACTIVE &&\n      canBeInterrupted &&\n      handler.getTag() > 0\n    );\n  }\n\n  public shouldBeCancelledByOther(_handler: GestureHandler): boolean {\n    return !this.disallowInterruption;\n  }\n\n  public disallowsInterruption(): boolean {\n    return this.disallowInterruption;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}