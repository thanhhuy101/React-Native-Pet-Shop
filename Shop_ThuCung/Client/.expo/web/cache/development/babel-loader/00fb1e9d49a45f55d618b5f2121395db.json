{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useEffect, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { styles } from \"./styles\";\n\nvar ic_close = require(\"../../assets/close.png\");\n\nvar defaultProps = {\n  style: {},\n  value: '',\n  showIcon: true,\n  currency: false,\n  numeric: false\n};\n\nvar TextInputComponent = function TextInputComponent(props) {\n  var fontFamily = props.fontFamily,\n      style = props.style,\n      value = props.value,\n      _props$placeholderTex = props.placeholderTextColor,\n      placeholderTextColor = _props$placeholderTex === void 0 ? '#000' : _props$placeholderTex,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,\n      showIcon = props.showIcon,\n      inputStyle = props.inputStyle,\n      iconStyle = props.iconStyle,\n      _props$onChangeText = props.onChangeText,\n      onChangeText = _props$onChangeText === void 0 ? function (_value) {} : _props$onChangeText,\n      renderLeftIcon = props.renderLeftIcon,\n      renderRightIcon = props.renderRightIcon;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  useEffect(function () {\n    if (value) {\n      setText(value);\n    }\n  }, [value]);\n\n  var onChange = function onChange(text) {\n    setText(text);\n    onChangeText(text);\n  };\n\n  var _renderRightIcon = function _renderRightIcon() {\n    if (showIcon) {\n      if (renderRightIcon) {\n        return renderRightIcon();\n      }\n\n      if (text.length > 0) {\n        return React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return onChange('');\n          }\n        }, React.createElement(Image, {\n          source: ic_close,\n          style: [styles.icon, iconStyle]\n        }));\n      }\n\n      return null;\n    }\n\n    return null;\n  };\n\n  var font = function font() {\n    if (fontFamily) {\n      return {\n        fontFamily: fontFamily\n      };\n    } else {\n      return {};\n    }\n  };\n\n  return React.createElement(TouchableWithoutFeedback, null, React.createElement(View, {\n    style: [style]\n  }, React.createElement(View, {\n    style: styles.textInput\n  }, renderLeftIcon === null || renderLeftIcon === void 0 ? void 0 : renderLeftIcon(), React.createElement(TextInput, _extends({}, props, {\n    style: [styles.input, inputStyle, font()],\n    value: text,\n    placeholder: placeholder,\n    placeholderTextColor: placeholderTextColor,\n    onChangeText: onChange\n  })), _renderRightIcon())));\n};\n\nTextInputComponent.defaultProps = defaultProps;\nexport default TextInputComponent;","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","styles","ic_close","require","defaultProps","style","value","showIcon","currency","numeric","TextInputComponent","props","fontFamily","placeholderTextColor","placeholder","inputStyle","iconStyle","onChangeText","_value","renderLeftIcon","renderRightIcon","text","setText","onChange","_renderRightIcon","length","TouchableOpacity","onPress","Image","source","icon","font","TouchableWithoutFeedback","View","textInput","TextInput","input"],"sources":["index.tsx"],"sourcesContent":["/* eslint-disable no-shadow */\nimport React, { useEffect, useState } from 'react';\nimport {\n  Image,\n  TextInput,\n  TouchableOpacity,\n  View,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport type { CTextInput } from './model';\nimport { styles } from './styles';\n\nconst ic_close = require('../../assets/close.png');\n\nconst defaultProps = {\n  style: {},\n  value: '',\n  showIcon: true,\n  currency: false,\n  numeric: false,\n};\n\nconst TextInputComponent: CTextInput = (props) => {\n  const {\n    fontFamily,\n    style,\n    value,\n    placeholderTextColor = '#000',\n    placeholder = '',\n    showIcon,\n    inputStyle,\n    iconStyle,\n    onChangeText = (_value: string) => {},\n    renderLeftIcon,\n    renderRightIcon,\n  } = props;\n\n  const [text, setText] = useState<string>('');\n\n  useEffect(() => {\n    if (value) {\n      setText(value);\n    }\n  }, [value]);\n\n  const onChange = (text: string) => {\n    setText(text);\n    onChangeText(text);\n  };\n\n  const _renderRightIcon = () => {\n    if (showIcon) {\n      if (renderRightIcon) {\n        return renderRightIcon();\n      }\n      if (text.length > 0) {\n        return (\n          <TouchableOpacity onPress={() => onChange('')}>\n            <Image source={ic_close} style={[styles.icon, iconStyle]} />\n          </TouchableOpacity>\n        );\n      }\n      return null;\n    }\n    return null;\n  };\n\n  const font = () => {\n    if (fontFamily) {\n      return {\n        fontFamily: fontFamily,\n      };\n    } else {\n      return {};\n    }\n  };\n\n  return (\n    <TouchableWithoutFeedback>\n      <View style={[style]}>\n        <View style={styles.textInput}>\n          {renderLeftIcon?.()}\n          <TextInput\n            {...props}\n            style={[styles.input, inputStyle, font()]}\n            value={text}\n            placeholder={placeholder}\n            placeholderTextColor={placeholderTextColor}\n            onChangeText={onChange}\n          />\n          {_renderRightIcon()}\n        </View>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nTextInputComponent.defaultProps = defaultProps;\n\nexport default TextInputComponent;\n"]},"metadata":{},"sourceType":"module"}