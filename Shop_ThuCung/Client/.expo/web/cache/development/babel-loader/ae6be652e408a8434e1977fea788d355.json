{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar InteractionManager = function () {\n  function InteractionManager() {\n    _classCallCheck(this, InteractionManager);\n\n    _defineProperty(this, \"waitForRelations\", new Map());\n\n    _defineProperty(this, \"simultaneousRelations\", new Map());\n  }\n\n  _createClass(InteractionManager, [{\n    key: \"configureInteractions\",\n    value: function configureInteractions(handler, config) {\n      this.dropRelationsForHandlerWithTag(handler.getTag());\n\n      if (config.waitFor) {\n        var waitFor = [];\n        config.waitFor.forEach(function (otherHandler) {\n          if (typeof otherHandler === 'number') {\n            waitFor.push(otherHandler);\n          } else {\n            waitFor.push(otherHandler.handlerTag);\n          }\n        });\n        this.waitForRelations.set(handler.getTag(), waitFor);\n      }\n\n      if (config.simultaneousHandlers) {\n        var simultaneousHandlers = [];\n        config.simultaneousHandlers.forEach(function (otherHandler) {\n          if (typeof otherHandler === 'number') {\n            simultaneousHandlers.push(otherHandler);\n          } else {\n            simultaneousHandlers.push(otherHandler.handlerTag);\n          }\n        });\n        this.simultaneousRelations.set(handler.getTag(), simultaneousHandlers);\n      }\n    }\n  }, {\n    key: \"shouldWaitForHandlerFailure\",\n    value: function shouldWaitForHandlerFailure(handler, otherHandler) {\n      var waitFor = this.waitForRelations.get(handler.getTag());\n\n      if (!waitFor) {\n        return false;\n      }\n\n      var shouldWait = false;\n      waitFor.forEach(function (tag) {\n        if (tag === otherHandler.getTag()) {\n          shouldWait = true;\n          return;\n        }\n      });\n      return shouldWait;\n    }\n  }, {\n    key: \"shouldRecognizeSimultaneously\",\n    value: function shouldRecognizeSimultaneously(handler, otherHandler) {\n      var simultaneousHandlers = this.simultaneousRelations.get(handler.getTag());\n\n      if (!simultaneousHandlers) {\n        return false;\n      }\n\n      var shouldRecognizeSimultaneously = false;\n      simultaneousHandlers.forEach(function (tag) {\n        if (tag === otherHandler.getTag()) {\n          shouldRecognizeSimultaneously = true;\n          return;\n        }\n      });\n      return shouldRecognizeSimultaneously;\n    }\n  }, {\n    key: \"shouldRequireHandlerToWaitForFailure\",\n    value: function shouldRequireHandlerToWaitForFailure(_handler, _otherHandler) {\n      return false;\n    }\n  }, {\n    key: \"shouldHandlerBeCancelledBy\",\n    value: function shouldHandlerBeCancelledBy(_handler, _otherHandler) {\n      return false;\n    }\n  }, {\n    key: \"dropRelationsForHandlerWithTag\",\n    value: function dropRelationsForHandlerWithTag(handlerTag) {\n      this.waitForRelations.delete(handlerTag);\n      this.simultaneousRelations.delete(handlerTag);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.waitForRelations.clear();\n      this.simultaneousRelations.clear();\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!this.instance) {\n        this.instance = new InteractionManager();\n      }\n\n      return this.instance;\n    }\n  }]);\n\n  return InteractionManager;\n}();\n\nexport { InteractionManager as default };\n\n_defineProperty(InteractionManager, \"instance\", void 0);","map":{"version":3,"mappings":"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","names":["InteractionManager","constructor","_defineProperty","Map","configureInteractions","handler","config","dropRelationsForHandlerWithTag","getTag","waitFor","forEach","otherHandler","push","handlerTag","waitForRelations","set","simultaneousHandlers","simultaneousRelations","shouldWaitForHandlerFailure","get","shouldWait","tag","shouldRecognizeSimultaneously","shouldRequireHandlerToWaitForFailure","_handler","_otherHandler","shouldHandlerBeCancelledBy","delete","reset","clear","instance"],"sources":["InteractionManager.ts"],"sourcesContent":["import GestureHandler from '../handlers/GestureHandler';\nimport { Config, Handler } from '../interfaces';\n\nexport default class InteractionManager {\n  private static instance: InteractionManager;\n  private readonly waitForRelations: Map<number, number[]> = new Map();\n  private readonly simultaneousRelations: Map<number, number[]> = new Map();\n\n  // Private becaues of singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  public configureInteractions(handler: GestureHandler, config: Config) {\n    this.dropRelationsForHandlerWithTag(handler.getTag());\n\n    if (config.waitFor) {\n      const waitFor: number[] = [];\n      config.waitFor.forEach((otherHandler: Handler): void => {\n        // New API reference\n        if (typeof otherHandler === 'number') {\n          waitFor.push(otherHandler);\n        } else {\n          // Old API reference\n          waitFor.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.waitForRelations.set(handler.getTag(), waitFor);\n    }\n\n    if (config.simultaneousHandlers) {\n      const simultaneousHandlers: number[] = [];\n      config.simultaneousHandlers.forEach((otherHandler: Handler): void => {\n        if (typeof otherHandler === 'number') {\n          simultaneousHandlers.push(otherHandler);\n        } else {\n          simultaneousHandlers.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.simultaneousRelations.set(handler.getTag(), simultaneousHandlers);\n    }\n  }\n\n  public shouldWaitForHandlerFailure(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    const waitFor: number[] | undefined = this.waitForRelations.get(\n      handler.getTag()\n    );\n    if (!waitFor) {\n      return false;\n    }\n\n    let shouldWait = false;\n\n    waitFor.forEach((tag: number): void => {\n      if (tag === otherHandler.getTag()) {\n        shouldWait = true;\n        return; //Returns from callback\n      }\n    });\n\n    return shouldWait;\n  }\n\n  public shouldRecognizeSimultaneously(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    const simultaneousHandlers:\n      | number[]\n      | undefined = this.simultaneousRelations.get(handler.getTag());\n    if (!simultaneousHandlers) {\n      return false;\n    }\n\n    let shouldRecognizeSimultaneously = false;\n\n    simultaneousHandlers.forEach((tag: number): void => {\n      if (tag === otherHandler.getTag()) {\n        shouldRecognizeSimultaneously = true;\n        return;\n      }\n    });\n\n    return shouldRecognizeSimultaneously;\n  }\n\n  public shouldRequireHandlerToWaitForFailure(\n    _handler: GestureHandler,\n    _otherHandler: GestureHandler\n  ): boolean {\n    //TODO: Implement logic\n    return false;\n  }\n\n  public shouldHandlerBeCancelledBy(\n    _handler: GestureHandler,\n    _otherHandler: GestureHandler\n  ): boolean {\n    //TODO: Implement logic\n    return false;\n  }\n\n  public dropRelationsForHandlerWithTag(handlerTag: number): void {\n    this.waitForRelations.delete(handlerTag);\n    this.simultaneousRelations.delete(handlerTag);\n  }\n\n  public reset() {\n    this.waitForRelations.clear();\n    this.simultaneousRelations.clear();\n  }\n\n  public static getInstance(): InteractionManager {\n    if (!this.instance) {\n      this.instance = new InteractionManager();\n    }\n\n    return this.instance;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}