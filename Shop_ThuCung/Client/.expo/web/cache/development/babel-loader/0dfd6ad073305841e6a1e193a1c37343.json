{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport * as React from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport Product from \"./views-users/Product\";\nimport Login from \"./views-users/Login\";\nimport Home from \"./views-users/Home\";\nimport Search from \"./views-users/Search\";\nimport Setting from \"./views-users/Setting\";\nimport ProductDetail from \"./views-users/ProductDetail\";\nimport Cart from \"./views-users/Cart\";\nimport Register from \"./views-users/Register\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/stores/store\";\nimport ActionManagement from \"./views-admin/ActionManagement\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Tab = createBottomTabNavigator();\n\nfunction TabNavigator() {\n  return _jsxs(Tab.Navigator, {\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        headerShown: false,\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n              color = _ref2.color,\n              size = _ref2.size;\n          var iconName;\n\n          if (route.name === \"Home\") {\n            iconName = focused ? \"home\" : \"home\";\n          } else if (route.name === \"Search\") {\n            iconName = focused ? \"search\" : \"search\";\n          } else if (route.name === \"Products\") {\n            iconName = focused ? \"paw\" : \"paw\";\n          } else if (route.name === \"Cart\") {\n            iconName = focused ? \"ios-cart\" : \"ios-cart\";\n          }\n\n          return _jsx(Ionicons, {\n            name: iconName,\n            size: size,\n            color: color\n          });\n        },\n        tabBarActiveTintColor: \"#ffcdd2\",\n        tabBarInactiveTintColor: \"black\",\n        tabBarStyle: {\n          backgroundColor: \"#9575cd\"\n        }\n      };\n    },\n    children: [_jsx(Tab.Screen, {\n      name: \"Home\",\n      component: Home,\n      screenOptions: {\n        headerShown: false\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Search\",\n      component: Search,\n      screenOptions: {\n        headerShown: false\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Products\",\n      component: Product,\n      screenOptions: {\n        headerShown: false\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Cart\",\n      component: Cart,\n      screenOptions: {\n        headerShown: false\n      }\n    })]\n  });\n}\n\nvar Drawer = createDrawerNavigator();\n\nfunction DrawerNavigator(_ref3) {\n  _objectDestructuringEmpty(_ref3);\n\n  return _jsxs(Drawer.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: [_jsx(Drawer.Screen, {\n      name: \"MenuTab\",\n      component: TabNavigator\n    }), _jsx(Drawer.Screen, {\n      name: \"Profile\",\n      component: Setting\n    })]\n  });\n}\n\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  return _jsx(Provider, {\n    children: _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        screenOptions: {\n          headerShown: false\n        },\n        children: [_jsx(Stack.Screen, {\n          name: \"Login\",\n          component: Login\n        }), _jsx(Stack.Screen, {\n          name: \"Register\",\n          component: Register\n        }), _jsx(Stack.Screen, {\n          name: \"Tab\",\n          component: DrawerNavigator\n        }), _jsx(Stack.Screen, {\n          name: \"Product\",\n          component: Product\n        }), _jsx(Stack.Screen, {\n          name: \"Cart\",\n          component: Cart\n        })]\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\"\n  }\n});","map":{"version":3,"names":["React","StatusBar","NavigationContainer","createNativeStackNavigator","createBottomTabNavigator","createDrawerNavigator","Product","Login","Home","Search","Setting","ProductDetail","Cart","Register","Ionicons","Provider","store","ActionManagement","Tab","TabNavigator","route","headerShown","tabBarIcon","focused","color","size","iconName","name","tabBarActiveTintColor","tabBarInactiveTintColor","tabBarStyle","backgroundColor","Drawer","DrawerNavigator","Stack","App","styles","StyleSheet","create","container","flex"],"sources":["D:/PT di động/Project/Shops/App.js"],"sourcesContent":["import * as React from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, Text, View, TouchableOpacity, Image } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport Product from \"./views-users/Product\";\nimport Login from \"./views-users/Login\";\nimport Home from \"./views-users/Home\";\nimport Search from \"./views-users/Search\";\nimport Setting from \"./views-users/Setting\";\nimport ProductDetail from \"./views-users/ProductDetail\";\nimport Cart from \"./views-users/Cart\";\nimport Register from \"./views-users/Register\";\n// import Settings from \"./views/Settings\";FontAwesomeIcon from \"react-native-vector-icons/FontAwesome\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/stores/store\";\nimport ActionManagement from \"./views-admin/ActionManagement\";\n\n\n////***********STACK + TAB */\nconst Tab = createBottomTabNavigator();\nfunction TabNavigator() {\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        headerShown: false,\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName;\n          if (route.name === \"Home\") {\n            iconName = focused ? \"home\" : \"home\";\n          } else if (route.name === \"Search\") {\n            iconName = focused ? \"search\" : \"search\";\n          } else if (route.name === \"Products\") {\n            iconName = focused ? \"paw\" : \"paw\";\n          } else if (route.name === \"Cart\") {\n            iconName = focused ? \"ios-cart\" : \"ios-cart\";\n          }\n          return <Ionicons name={iconName} size={size} color={color} />;\n        },\n\n        tabBarActiveTintColor: \"#ffcdd2\",\n        tabBarInactiveTintColor: \"black\",\n        tabBarStyle: { backgroundColor: \"#9575cd\" },\n      })}\n    >\n      <Tab.Screen\n        name=\"Home\"\n        component={Home}\n        screenOptions={{ headerShown: false }}\n      />\n      <Tab.Screen\n        name=\"Search\"\n        component={Search}\n        screenOptions={{ headerShown: false }}\n      />\n      <Tab.Screen\n        name=\"Products\"\n        component={Product}\n        screenOptions={{ headerShown: false }}\n      />\n      <Tab.Screen\n        name=\"Cart\"\n        component={Cart}\n        screenOptions={{ headerShown: false }}\n      />\n    </Tab.Navigator>\n  );\n}\n\nconst Drawer = createDrawerNavigator();\nfunction DrawerNavigator({}) {\n  return (\n    <Drawer.Navigator screenOptions={{ headerShown: false }}>\n      <Drawer.Screen name=\"MenuTab\" component={TabNavigator} />\n      <Drawer.Screen name=\"Profile\" component={Setting} />\n    </Drawer.Navigator>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <Provider>\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\n        <Stack.Screen name=\"Login\" component={Login} />\n        <Stack.Screen name=\"Register\" component={Register} />\n        <Stack.Screen name=\"Tab\" component={DrawerNavigator} />\n        <Stack.Screen name=\"Product\" component={Product} />\n        <Stack.Screen name=\"Cart\" component={Cart} />\n      </Stack.Navigator>\n    </NavigationContainer>\n    </Provider>\n      // <Provider store={store}>\n      //   <ActionManagement />\n      // </Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n  },\n});\n\n/////*********DRAWER + STACK ****************\n// function HomeNavigatorScreen() {\n//   const HomeNavigator = createNativeStackNavigator();\n//   return (\n//     <HomeNavigator.Navigator initialRouteName=\"Home\">\n//       <HomeNavigator.Screen name=\"Login\" component={Login} />\n//       <HomeNavigator.Screen name=\"Register\" component={Register} />\n//       <HomeNavigator.Screen name=\"Product\" component={Product} />\n//       <HomeNavigator.Screen name=\"ProductDetail\" component={ProductDetail} />\n//       <HomeNavigator.Screen name=\"Cart\" component={Cart} />\n//     </HomeNavigator.Navigator>\n//   );\n// }\n\n// export default function App({ navigation }) {\n//   const Drawer = createDrawerNavigator();\n//   return (\n//     <NavigationContainer>\n//       <Drawer.Navigator screenOptions={{ headerShown: false }}>\n//         <Drawer.Screen\n//           name=\"HomeScreen\"\n//           component={HomeNavigatorScreen}\n//           options={{\n//             title: \"Home\",\n//           }}\n//         />\n//           <Drawer.Screen\n//           name=\"Search\"\n//           component={Search}\n//           options={{\n//             title: \"Search\",\n//           }}\n//         />\n//         <Drawer.Screen\n//           name=\"CartScreen\"\n//           component={Cart}\n//           options={{\n//             title: \"Cart\",\n//           }}\n//         />\n//         <Drawer.Screen\n//           name=\"Setting\"\n//           component={Setting}\n//           options={{\n//             title: \"Setting\",\n//           }}\n//         />\n//       </Drawer.Navigator>\n//     </NavigationContainer>\n//   );\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: \"#fff\",\n//     // alignItems: 'center',\n//     // justifyContent: 'center',\n//   },\n// });\n/////********* ONLY STACK ************\n// const Stack = createNativeStackNavigator();\n\n// export default function App() {\n//   return (\n//     <NavigationContainer>\n//       <Stack.Navigator screenOptions={{ headerShown: false }}>\n//         <Stack.Screen\n//           name=\"Login\"\n//           component={Login}\n//           options={{ title: \"Login\" }}\n//         />\n//         <Stack.Screen\n//           name=\"Product\"\n//           component={Product}\n//           options={{ title: \"Product\" }}\n//         />\n//       </Stack.Navigator>\n//     </NavigationContainer>\n//   );\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: \"#fff\",\n//   },\n// });\n\n///////******** MIX TAB + STACK + DRAWER *************\n// const navOptionHandler = () => ({\n//   headerShown: false,\n// });\n\n// const StackHome = createNativeStackNavigator();\n// function HomeStack() {\n//   return (\n//     <StackHome.Navigator initialRouteName=\"Home\">\n//       <StackHome.Screen\n//         name=\"HomePage\"\n//         component={Home}\n//         options={navOptionHandler}\n//       />\n//       <StackHome.Screen\n//         name=\"HomePageDetail\"\n//         component={HomePageDetail}\n//         options={navOptionHandler}\n//       />\n//     </StackHome.Navigator>\n//   );\n// }\n\n// const StackProduct = createNativeStackNavigator();\n// function ProductStack() {\n//   return (\n//     <StackProduct.Navigator initialRouteName=\"Product\">\n//       <StackProduct.Screen\n//         name=\"ProductPage\"\n//         component={Product}\n//         options={navOptionHandler}\n//       />\n//       <StackProduct.Screen\n//         name=\"ProductPageDetail\"\n//         component={ProductPageDetail}\n//         options={navOptionHandler}\n//       />\n//     </StackProduct.Navigator>\n//   );\n// }\n\n// const Tab = createBottomTabNavigator();\n// function TabNavigator() {\n//   return (\n//     <Tab.Navigator\n//       screenOptions={({ route }) => ({\n//         headerShown: false,\n//         tabBarIcon: ({ focused, color, size }) => {\n//           let iconName;\n//           if (route.name === \"Home\") {\n//             iconName = focused ? \"home\" : \"home\";\n//           } else if (route.name === \"Product\") {\n//             iconName = focused ? \"shopping-bag\" : \"shopping-bag\";\n//           }\n//           return <Icon name={iconName} size={size} color={color} />;\n//         },\n\n//         tabBarActiveTintColor: \"#ffcdd2\",\n//         tabBarInactiveTintColor: \"black\",\n//         tabBarStyle: { backgroundColor: \"#9575cd\" },\n//       })}\n//     >\n//       <Tab.Screen\n//         name=\"Home\"\n//         component={HomeStack}\n//         options={navOptionHandler}\n//       />\n//       <Tab.Screen\n//         name=\"Product\"\n//         component={ProductStack}\n//         options={navOptionHandler}\n//       />\n//     </Tab.Navigator>\n//   );\n// }\n\n// const Drawer = createDrawerNavigator();\n// function DrawerNavigator() {\n//   return (\n//     <DrawerNavigator initialRouteName=\"MenuTab\">\n//       <Drawer.Screen\n//         name=\"MenuTab\"\n//         component={TabNavigator}\n//         options={navOptionHandler}\n//       />\n//       <Drawer.Screen\n//         name=\"Notice\"\n//         component={Notice}\n//         options={navOptionHandler}\n//       />\n//     </DrawerNavigator>\n//   );\n// }\n\n// const StackApp = createNativeStackNavigator();\n// export default function App() {\n//   return (\n//     <NavigationContainer>\n//       <StackApp.Navigator initialRouteName=\"Login\">\n//         <StackApp.Screen\n//           name=\"Login\"\n//           component={Login}\n//           //options={{ title: \"Login\" }}\n//           options={navOptionHandler}\n//         />\n//         <StackApp.Screen\n//           name=\"HomeApp\"\n//           component={DrawerNavigator}\n//           //options={{ title: \"Product\" }}\n//           options={navOptionHandler}\n//         />\n//       </StackApp.Navigator>\n//     </NavigationContainer>\n//   );\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: \"#fff\",\n//   },\n// });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}