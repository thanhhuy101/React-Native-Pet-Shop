{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\n\nvar isOrientationPortrait = function isOrientationPortrait(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  return height >= width;\n};\n\nvar isOrientationLandscape = function isOrientationLandscape(_ref2) {\n  var width = _ref2.width,\n      height = _ref2.height;\n  return width >= height;\n};\n\nexport function useDeviceOrientation() {\n  var screen = Dimensions.get('screen');\n  var initialState = {\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen)\n  };\n\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      orientation = _useState2[0],\n      setOrientation = _useState2[1];\n\n  useEffect(function () {\n    var onChange = function onChange(_ref3) {\n      var screen = _ref3.screen;\n      setOrientation({\n        portrait: isOrientationPortrait(screen),\n        landscape: isOrientationLandscape(screen)\n      });\n    };\n\n    var subscription = Dimensions.addEventListener('change', onChange);\n    return function () {\n      if (typeof (subscription === null || subscription === void 0 ? void 0 : subscription.remove) === 'function') {\n        subscription.remove();\n      } else {\n        Dimensions.removeEventListener('change', onChange);\n      }\n    };\n  }, []);\n  return orientation.portrait === true ? 'PORTRAIT' : 'LANDSCAPE';\n}","map":{"version":3,"mappings":";AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAGA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB;EAAA,IAAGC,KAAH,QAAGA,KAAH;EAAA,IAAUC,MAAV,QAAUA,MAAV;EAAA,OAC5BA,MAAM,IAAID,KADkB;AAA9B;;AAEA,IAAME,sBAAsB,GAAG,SAAzBA,sBAAyB;EAAA,IAAGF,KAAH,SAAGA,KAAH;EAAA,IAAUC,MAAV,SAAUA,MAAV;EAAA,OAC7BD,KAAK,IAAIC,MADoB;AAA/B;;AAGA,OAAO,SAASE,oBAAT,GAAgC;EACrC,IAAMC,MAAM,GAAGC,UAAU,CAACC,GAAXD,CAAe,QAAfA,CAAf;EACA,IAAME,YAAY,GAAG;IACnBC,QAAQ,EAAET,qBAAqB,CAACK,MAAD,CADZ;IAEnBK,SAAS,EAAEP,sBAAsB,CAACE,MAAD;EAFd,CAArB;;EAKA,gBAAsCN,QAAQ,CAACS,YAAD,CAA9C;EAAA;EAAA,IAAOG,WAAP;EAAA,IAAoBC,cAApB;;EAEAd,SAAS,CAAC,YAAM;IACd,IAAMe,QAAQ,GAAG,SAAXA,QAAW,QAAwC;MAAA,IAArCR,MAAqC,SAArCA,MAAqC;MACvDO,cAAc,CAAC;QACbH,QAAQ,EAAET,qBAAqB,CAACK,MAAD,CADlB;QAEbK,SAAS,EAAEP,sBAAsB,CAACE,MAAD;MAFpB,CAAD,CAAdO;IADF;;IAOA,IAAME,YAAY,GAAGR,UAAU,CAACS,gBAAXT,CAA4B,QAA5BA,EAAsCO,QAAtCP,CAArB;IAEA,OAAO,YAAM;MACX,IAAI,QAAOQ,YAAP,SAAOA,gBAAP,WAAOA,GAAP,MAAOA,eAAY,CAAEE,MAArB,MAAgC,UAApC,EAAgD;QAC9CF,YAAY,CAACE,MAAbF;MADF,OAEO;QAELR,UAAU,CAACW,mBAAXX,CAA+B,QAA/BA,EAAyCO,QAAzCP;MACD;IANH;EAVO,GAkBN,EAlBM,CAATR;EAoBA,OAAOa,WAAW,CAACF,QAAZE,KAAyB,IAAzBA,GAAgC,UAAhCA,GAA6C,WAApD;AACD","names":["useEffect","useState","isOrientationPortrait","width","height","isOrientationLandscape","useDeviceOrientation","screen","Dimensions","get","initialState","portrait","landscape","orientation","setOrientation","onChange","subscription","addEventListener","remove","removeEventListener"],"sources":["useDeviceOrientation.ts"],"sourcesContent":["/* eslint-disable no-shadow */\nimport { useEffect, useState } from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\n\nconst isOrientationPortrait = ({ width, height }: ScaledSize) =>\n  height >= width;\nconst isOrientationLandscape = ({ width, height }: ScaledSize) =>\n  width >= height;\n\nexport function useDeviceOrientation() {\n  const screen = Dimensions.get('screen');\n  const initialState = {\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen),\n  };\n\n  const [orientation, setOrientation] = useState(initialState);\n\n  useEffect(() => {\n    const onChange = ({ screen }: { screen: ScaledSize }) => {\n      setOrientation({\n        portrait: isOrientationPortrait(screen),\n        landscape: isOrientationLandscape(screen),\n      });\n    };\n\n    const subscription = Dimensions.addEventListener('change', onChange);\n\n    return () => {\n      if (typeof subscription?.remove === 'function') {\n        subscription.remove();\n      } else {\n        // React Native < 0.65\n        Dimensions.removeEventListener('change', onChange);\n      }\n    };\n  }, []);\n\n  return orientation.portrait === true ? 'PORTRAIT' : 'LANDSCAPE';\n}\n"]},"metadata":{},"sourceType":"module"}